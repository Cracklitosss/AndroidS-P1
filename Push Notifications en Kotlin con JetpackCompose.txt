Push Notifications en Kotlin con
Jetpack Compose


Requisitos Previos


Proyecto en Kotlin con Jetpack Compose
Firebase (para FCM - Firebase Cloud Messaging)
Cuenta de desarrollador en Google Play (para configuraciones avanzadas en producción)




Configuración de Firebase Cloud
Messaging (FCM)


1.1 Registro del Proyecto en Firebase


Ir a Firebase Console
Crear un nuevo proyecto
Agregar una aplicación Android (con el package name correcto)
Descargar el archivo google-services.json e incluirlo en app/


1.2 Agregar las Dependencias en build.gradle.kts


dependencies {
implementation("com.google.firebase:firebase-messaging-ktx:23.2.1") // Última versión
recomendada
}


En el build.gradle.kts de nivel de proyecto:


plugins {
id("com.google.gms.google-services") version "4.3.15" apply false
}


Aplicar el plugin en app/build.gradle.kts:


plugins {
id("com.android.application")
id("com.google.gms.google-services")
}


Obtener y Manejar el Token de
Notificación


Para recibir notificaciones, la app necesita un token único.


2.1 Obtener el Token en MyFirebaseMessagingService.kt


import android.util.Log
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage


class MyFirebaseMessagingService : FirebaseMessagingService() {


override fun onNewToken(token: String) {
super.onNewToken(token)
Log.d("FCM", "Nuevo token: $token")
// Aquí puedes enviar el token a tu backend si lo necesitas
}


override fun onMessageReceived(remoteMessage: RemoteMessage) {
super.onMessageReceived(remoteMessage)
Log.d("FCM", "Mensaje recibido: ${remoteMessage.notification?.body}")
// Llamar a una función para mostrar la notificación
}


}


Registrar el servicio en AndroidManifest.xml:


Enviar Notificaciones desde Firebase


Desde la consola de Firebase:


Ir a Cloud Messaging > Enviar mensaje1.
Escribir un título y cuerpo2.
Enviar a un token específico o tópicos3.


Desde un servidor backend (Ejemplo con cURL):


curl -X POST "https://fcm.googleapis.com/fcm/send" \
-H "Authorization: key=YOUR_SERVER_KEY" \
-H "Content-Type: application/json" \
-d '{
"to": "DEVICE_TOKEN",
"notification": {
"title": "Hola",
"body": "Este es un mensaje de prueba"
}
}'


Mostrar una Notificación Localmente
con NotificationCompat


Si la app está en segundo plano, Firebase automáticamente muestra la notificación. Si la app está en primer
plano, la manejamos manualmente.


3.1 Agregar Dependencia


dependencies {
implementation("androidx.core:core-ktx:1.12.0")
}


3.2 Crear una Función para Mostrar Notificaciones


import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat


fun showNotification(context: Context, title: String, message: String) {
val channelId = "my_channel_id"
val notificationId = 1


if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
val channel = NotificationChannel(channelId, "Mi Canal",
NotificationManager.IMPORTANCE_DEFAULT)
val manager = context.getSystemService(NotificationManager::class.java)
manager.createNotificationChannel(channel)
}


val notification = NotificationCompat.Builder(context, channelId)
.setSmallIcon(android.R.drawable.ic_dialog_info)
.setContentTitle(title)
.setContentText(message)
.setPriority(NotificationCompat.PRIORITY_DEFAULT)
.build()


NotificationManagerCompat.from(context).notify(notificationId, notification)
}


Llamar esta función dentro de onMessageReceived:


override fun onMessageReceived(remoteMessage: RemoteMessage) {
super.onMessageReceived(remoteMessage)
remoteMessage.notification?.let {
showNotification(applicationContext, it.title ?: "Sin título", it.body ?: "Sin mensaje")
}
}


Personalización de Notificaciones en
Jetpack Compose


Si queremos mostrar notificaciones dentro de la UI en tiempo real:


4.1 Usar un Estado Global en Jetpack Compose


import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember


val notificationMessage = mutableStateOf("")


fun updateNotificationMessage(message: String) {
notificationMessage.value = message
}


4.2 Mostrar en la UI


@Composable
fun NotificationBanner() {
if (notificationMessage.value.isNotEmpty()) {
Text(
text = "


Ð ${notificationMessage.value}",
modifier = Modifier.padding(16.dp)
)
}
}


Llamamos updateNotificationMessage(remoteMessage.notification?.body ?: "") en onMessageReceived
para actualizar el estado.


Seguridad y Buenas Prácticas


' No exponer la Server Key en el código
Manejar permisos en Android 13+ (POST_NOTIFICATIONS)
Usar tópicos para segmentar usuarios
 Monitorear en Firebase Analytics